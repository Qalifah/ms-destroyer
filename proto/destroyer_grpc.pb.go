// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/destroyer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DestroyerClient is the client API for Destroyer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DestroyerClient interface {
	AcquireTargets(ctx context.Context, in *TargetParams, opts ...grpc.CallOption) (*Response, error)
	ListTargets(ctx context.Context, in *TargetParams, opts ...grpc.CallOption) (*Response, error)
	GetTarget(ctx context.Context, in *TargetParams, opts ...grpc.CallOption) (*Response, error)
}

type destroyerClient struct {
	cc grpc.ClientConnInterface
}

func NewDestroyerClient(cc grpc.ClientConnInterface) DestroyerClient {
	return &destroyerClient{cc}
}

func (c *destroyerClient) AcquireTargets(ctx context.Context, in *TargetParams, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Destroyer/acquireTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destroyerClient) ListTargets(ctx context.Context, in *TargetParams, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Destroyer/listTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *destroyerClient) GetTarget(ctx context.Context, in *TargetParams, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Destroyer/getTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DestroyerServer is the server API for Destroyer service.
// All implementations must embed UnimplementedDestroyerServer
// for forward compatibility
type DestroyerServer interface {
	AcquireTargets(context.Context, *TargetParams) (*Response, error)
	ListTargets(context.Context, *TargetParams) (*Response, error)
	GetTarget(context.Context, *TargetParams) (*Response, error)
	mustEmbedUnimplementedDestroyerServer()
}

// UnimplementedDestroyerServer must be embedded to have forward compatible implementations.
type UnimplementedDestroyerServer struct {
}

func (UnimplementedDestroyerServer) AcquireTargets(context.Context, *TargetParams) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireTargets not implemented")
}
func (UnimplementedDestroyerServer) ListTargets(context.Context, *TargetParams) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargets not implemented")
}
func (UnimplementedDestroyerServer) GetTarget(context.Context, *TargetParams) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTarget not implemented")
}
func (UnimplementedDestroyerServer) mustEmbedUnimplementedDestroyerServer() {}

// UnsafeDestroyerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DestroyerServer will
// result in compilation errors.
type UnsafeDestroyerServer interface {
	mustEmbedUnimplementedDestroyerServer()
}

func RegisterDestroyerServer(s grpc.ServiceRegistrar, srv DestroyerServer) {
	s.RegisterService(&Destroyer_ServiceDesc, srv)
}

func _Destroyer_AcquireTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestroyerServer).AcquireTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Destroyer/acquireTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestroyerServer).AcquireTargets(ctx, req.(*TargetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Destroyer_ListTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestroyerServer).ListTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Destroyer/listTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestroyerServer).ListTargets(ctx, req.(*TargetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Destroyer_GetTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestroyerServer).GetTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Destroyer/getTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestroyerServer).GetTarget(ctx, req.(*TargetParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Destroyer_ServiceDesc is the grpc.ServiceDesc for Destroyer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Destroyer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Destroyer",
	HandlerType: (*DestroyerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "acquireTargets",
			Handler:    _Destroyer_AcquireTargets_Handler,
		},
		{
			MethodName: "listTargets",
			Handler:    _Destroyer_ListTargets_Handler,
		},
		{
			MethodName: "getTarget",
			Handler:    _Destroyer_GetTarget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/destroyer.proto",
}
